class Solution {
    public int solution(int[] numbers, int target) {
        return dfs(numbers, target, 0, 0);
    }
    
    private int dfs(int[] numbers, int target, int sum, int current) {
        int ans = 0;

        if (current == numbers.length) {
            if (target == sum) {
                return 1;
            }
            return 0;
        }

        ans += dfs(numbers, target, sum + numbers[current], current + 1);
        ans += dfs(numbers, target, sum + numbers[current] * -1, current + 1);

        return ans;
    }
}

//이 문제를 간단하게 요약하면 전체 배열 중 특정 수를 음수로 바꿔 타갯을 찾는 것.
//특정 수만 음수로 바꾼 전체 합은 전체 합 - (음수로 바꿀 수 * 2)가 성립함
//따라서 전체 합에서 차례대로 index를 탐색하며 수를 하나씩 빼본다. ->partSum이라고 하자.
//만약 partSum이 target보다 작다면 다른 수를 더 빼도 target보다 항상 작으므로 이 경우 찾고자 하는 경우를 만족하지 못한다.
//만약 partSum이 target과 같다면 더이상 다른 수를 뺄 필요 없이 경우의 수를 하나 찾았으며 이 경우 추가 탐색은 필요없다.
//만약 partSum이 target보다 크다면 뺀 수의 다음 인덱스들을 하나씩 다시 뺴본다. (재귀함수로 구현)
//이전에 뺀 인덱스의 다음만 탐색하는것은 어떤 수를 뺴는데 있어 순서가 고려되지 않기때문.
//(3번째 인덱스와 1번쨰 인덱스를 빼는 경우는 순서를 고려하지 않은 1가지 경우의 수)
